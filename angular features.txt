+ using bootstrap at project -> 	npm install --save bootstrap, then we should to inform our project abaut using bootstrap - > at .angular-cli.json  
   styles array  add path to "../node_modules/bootstrap/dist/css/bootstrap.min.css" from index.html point.

+ creating component by CLI ->	ng g c component_name -spec false

+ creating directive by CLI -> ng g d directive_name

+ creating pipe by CLI -> ng g p pipe_name

+ Augury -> Chrome extension for debaging an angular app, and allow you to look on dependencies. 

+ [routerLinkActiveOptions] = {exact: true} -    --   only if path has full match   --  use this for '/' - path and you will not have problem with two active links at one time

+ WildCard route : { path: '**', redirectTo: '/non-found'} - this route catch all routs you don't know;  - HAS TO BE LAST

+ best practice of routing: take out routing at single file -  app-routing.module

+ RxJS - documentation.

+ From Validators : https://angular.io/api/forms/Validators

+ if you need to create some form controls dynamically or your own validator (or acyncValidator ( like email validator ) ) (like forbidden names) - use reactive form FormArray

+ you can listening changes at your (reactive) form using this.signupForm.valueChanges.subscribe( ( value ) => console.log(value) );  when signupForm: FormGroup
   or this.signupForm.statusChanges.subscribe( ( value ) => console.log(value) ); (valid or invalid status)

+ if you need to go back(navigation) -> 	 this.router.navigate(['../'], {relativeTo: this.route}), where router: Router, route: ActivatedRouter

+ built-in pipes  ->  	https://angular.io/api?query=pipes

+ pipes - good way to get filter

+ @Pipe({name: 'somename', pure: false}).. 	-> 	use pure: false 	if you want to reload some data at html after changing data ( for ex: at some filter) -> be careful to use this future.

+ use | sync pipe for async data at template 